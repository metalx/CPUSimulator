//Action1: ini X0
//To access memory whose index is bigger than 63,
//as the immediate number is limited to 6 bits,
//we must firstly initialize the X0
//Here is what we do:

LDA 0 0 63	//R0 = 63

//This is how we get a random memory number(63*256) large than 63:shift 63 left 8bits
SRC 0 8 L L	//R0 = R0*256

//Store the number we just got to memory 63
STR 0 0 63	//M(63) = R0 = 63*256
LDX 0 63	//X0 = M(63)


//Action2: store 63*256 (as initial address)
//The number 63*256 we just got will be the initial address for all the data memory we access later
//we store this number into M(16191)
STX 0 2	//M(2) = X0 = 63*256


//Action3: get input
//This is where we let users to input
//input->R0->M(X0)
LDA 3 0 11
LDA 2 0 12
IN 0 0
JMP 0 15
CHK 1 0
JZ 1 0 16
IN 0 0		//R0 = input
OUT 0 1
STR 0 1 0	//M(X0) = R0 = input

//X0++ LINE:16
LDA 1 1 1	//R1 = X0+1
STR 1 0 63	//M(63) = R1 = X0+1
LDX 0 63	//X0 = M(63)

SOB 2 0 11
SOB 3 0 8

//STORE INDEX
LDA 3 0 0
STR 3 0 3
LDX 0 3		//X0 = 0

LDR 0 0 2	//R0 = 16128
LDA 3 0 10
STR 0 1 11
AIR 0 12

LDA 1 1 1	//R1 = X0+1
STR 1 0 63	//M(63) = R1 = X0+1
LDX 0 63

SOB 3 0 26

//SEARCH
LDR 0 0 2
STR 0 0 4
AIR 0 60
AIR 0 60
AIR 0 0		//useless
STR 0 0 3	//M3 = 16160 M4 = 16128
LDA 0 0 60
STR 0 0 5

LDA 2 0 0
LDX 0 3
LDR 0 1 0
JZ 0 0 49
AIR 2 1
LDA 1 1 1	//R1 = X0+1
STR 1 0 63	//M(63) = R1 = X0+1
LDX 0 63
JMP 0 42	//R0 = # OF SEQUENCE
STR 2 0 6

LDA 3 0 60
AIR 3 60	//R3 = 120

LDR 0 0 6	//
VSUB 0 0 3

LDX 0 3
LDR 1 1 0 
LDR 0 0 6
SIR 0 1
LDR 2 1 1	//
ORR 1 2

LDA 2 1 1	//R2 = X0+1
STR 2 0 63	//M(63) = R2 = X0+1
LDX 0 63

SOB 0 0 58
LDX 0 5

JNE 1 1 22
LDR 0 0 4
SMR 0 0 2
LDA 2 0 12
DIV 0 2
AIR 0 11
STR 0 0 7
LDX 0 7 I

LDR 0 1 0	//

LDA 1 1 1	//R1 = X0+1
STR 1 0 63	//M(63) = R1 = X0+1
LDX 0 63
STX 0 7 I

LDX 0 5
JZ 0 1 22
OUT 0 1

JMP 1 12
LDR 0 0 6
VADD 0 0 3
LDR 0 0 4
AIR 0 1
STR 0 0 4
SOB 3 0 52